name: Rails Analytics CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# CI (Testing) Job

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    
    steps: 
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with: 
          ruby-version: '3.3.5'
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with: 
          node-version: '20'
          cache: 'npm'

  lint: 
    name: Code Quality
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with: 
          ruby-version: '3.3.5'
          bundler-cache: true
          
      - name: Run RuboCop
        run: |
          bundle exec rubocop --parallel || true

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with: 
          node-version: '20'

      - name: Run ESLint
        run: |
          yarn run eslint . || true

  test:
    name: Continuous Integration (Test)
    runs-on: ubuntu-latest
    needs: lint

    # Set up a PostgreSQL service container for tests
    services: 
      postgres:
        image: postgres:15-alpine
        env: 
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rails_test
        ports: 
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps: 
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up ruby
      uses:  ruby/setup-ruby@v1
      with: 
        ruby-version: '3.3.5'
        bundler-cache: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v5
      with: 
        node-version: '20'
    
    - name: Prepare Test Environment (DB setup)
      env: 
        RAILS_ENV: test
        PGHOST: 127.0.0.1
        PGUSER: runner
        PGPASSWORD: password 
      run: |
        # Wait for PostgreSQL to start
        sleep 5 
        # Create and migrate the test database
        bundle exec rails db:create
        bundle exec rails db:migrate
        # Optional: Seed the database if necessary
        # bundle exec rails db:seed
    
    - name: Run tests (RSpec or Minitest)
      env: 
        RAILS_ENV: test
        PGHOST: 127.0.0.1
        PGUSER: runner
        PGPASSWORD: password
      run:  
        bundle exec rspec --format documentation
  
  build: 
    name: Build App (Docker & Assets)
    runs-on: ubuntu-latest
    needs: test

    steps: 
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with: 
          ruby-version: '3.3.5'
          bundler-cache: true
      
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with: 
          node-version: '20'

      - name: Precompile assets
        env: 
          RAILS_ENV: production
        run: |
          yarn install --frozen-lockfile
          bundle exec rails assets:precompile

      - name: Build Docker image
        run: |
          docker build -t rails-analytics:latest

      
# CD (Deployment) job

  deploy: 
    name: Continuous Deployment (Production)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 'Placeholder: Build Docker Image and Deploy'
        run: |
          echo "âœ… Build successful. Ready to deploy!"
    
