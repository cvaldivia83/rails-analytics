name: Rails Analytics CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# CI (Testing) Job

jobs:
  # Install dependencies

  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    
    steps: 
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Cache Ruby Gems
        uses: actions/cache@v4
        with: 
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'
          bundler-cache: false
      - run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3


  lint: 
    name: Code Quality
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Restore Ruby gems cache
        uses: actions/cache@v4
        with: 
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with: 
          ruby-version: '3.3.5'
          bundler-cache: false
      - run: bundle config path vendor/bundle
          
      - name: Run RuboCop
        run: |
          bundle exec rubocop --parallel || true

  test:
    name: Continuous Integration (Test)
    runs-on: ubuntu-latest
    needs: lint

    # Set up a PostgreSQL service container for tests
    services: 
      postgres:
        image: postgres:15-alpine
        env: 
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rails_test
        ports: 
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps: 
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Restore ruby gems cache
      uses: actions/cache@v4
      with: 
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}

    - name: Set up ruby
      uses:  ruby/setup-ruby@v1
      with: 
        ruby-version: '3.3.5'
        bundler-cache: false
    - run: bundle config path vendor/bundle
    
    - name: Prepare Test Environment (DB setup)
      env: 
        RAILS_ENV: test
        SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
        PGHOST: 127.0.0.1
        PGUSER: runner
        PGPASSWORD: password 
      run: |
        # Wait for PostgreSQL to start
        sleep 5 
        # Create and migrate the test database
        bundle exec rails db:create
        bundle exec rails db:migrate
        # Optional: Seed the database if necessary
        # bundle exec rails db:seed
    
    - name: Run tests (RSpec or Minitest)
      env: 
        RAILS_ENV: test
        PGHOST: 127.0.0.1
        PGUSER: runner
        PGPASSWORD: password
      run:  
        bundle exec rspec --format documentation
  
  build: 
    name: Build App (Docker & Assets)
    runs-on: ubuntu-latest
    needs: test
    env:
      RAILS_ENV: production
      SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
      DOCKER_BUILDKIT: 1
      BUILDKIT_INLINE_CACHE: 1

    steps: 
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Restore Ruby Gems cache
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with: 
          ruby-version: '3.3.5'
          bundler-cache: false
      - run: bundle config path vendor/bundle

      - name: Precompile assets (importmap)
        run: |
          bundle exec rails assets:precompile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: rails-analytics:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max

      
# CD (Deployment) job

  deploy: 
    name: Continuous Deployment (Production)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 'Placeholder: Build Docker Image and Deploy'
        run: |
          echo "âœ… Build successful. Ready to deploy!"
    
